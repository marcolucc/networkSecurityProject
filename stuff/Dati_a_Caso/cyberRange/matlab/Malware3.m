%trialfirS An M-file S-function 
function [sys,x0,str,ts] = Malware3(t,x,u,flag)
 


switch flag,

 %%%%%%%%%%%%%%%%%%
 % Initialization %
 %%%%%%%%%%%%%%%%%%
 case 0,
   [sys,x0,str,ts]=mdlInitializeSizes();

 %%%%%%%%%%%%%%%
 % Derivatives %
 %%%%%%%%%%%%%%%
 case 2,
   sys=mdlDerivatives(t,x,u);

 %%%%%%%%%%%
 % Outputs %
 %%%%%%%%%%%
 case 3,
   [sys]=mdlOutputs(t,x,u);
 %%%%%%%%%%%%%%%%%%%
 % Unhandled flags %
 %%%%%%%%%%%%%%%%%%%
 case {1,2,4,9},
   sys = [];

   
 %%%%%%%%%%%%%%%%%%%%
 % Unexpected flags %
 %%%%%%%%%%%%%%%%%%%%
 otherwise
   error(['Unhandled flag = ',num2str(flag)]);

end
% end trialfirS function

%
%=============================================================================
% mdlInitializeSizes
% Return the sizes, initial conditions, and sample times for the S-function.
%=============================================================================
%
function [sys,x0,str,ts]=mdlInitializeSizes()
sizes = simsizes;  % creating a structure variable
sizes.NumContStates  = 0;
sizes.NumDiscStates  = 3; 
sizes.NumOutputs     = 2;
sizes.NumInputs      = 1;
sizes.DirFeedthrough = 0;
sizes.NumSampleTimes = 1;
%
sys = simsizes(sizes);
x0= [0,0,0];
str = [];
ts  = [1 0];
% end mdlInitializeSizes

%=============================================================================
% mdlOutputs
% Return the block outputs.
%=============================================================================
%

function [sys]=mdlDerivatives(t,x,u)
% % A3 = 154; %cm^2
% % s12 = 0.5; %no-dim
% % H3_max = 100; % cm
% % Q3_max = 10; %cm^3/s
% % a1 = 0.45; %no-dim
% % g = 980.665; % grav const
% % 
% % h = u(1);
% % pump = x(1); 
% % if(h >= 0.05*H3_max)
% %     pump = 1;% Q3_max / A3;
% % elseif (h < 0.01*H3_max)
% %    pump = 0;
% % end

A3 = 154; %cm^2
s12 = 0.5; %no-dim
H3_max = 100; % cm
Q3_max = 10; %cm^3/s
a1 = 0.45; %no-dim
g = 980.665; % grav const
LIMIT1 = 100;
LIMIT2 = 30;
h = u(1);
attack = x(1);
pump = x(2);
counter = x(3);
%%%%%%%%%%%%%%%%%%%%%%%%
%%% ATTACK 1:
%%% Attack: if command(on3) then drop (on3) stop
%%%%%%%%%%%%%%%%%%%%%%%%
% if(h >= 0.05*H3_max)
%     pump = 0;% Q3_max / A3;
%     attack = 1;  
% end

%%%%%%%%%%%%%%%%%%%%%%%%
%%% ATTACK 2:
%%% Attack: repeate { if command(on3) then drop (on3) stop }
%%%%%%%%%%%%%%%%%%%%%%%%
% if(h >= 0.05*H3_max)
%     pump = 0;% Q3_max / A3;
%     attack = 1;  
% else
%      pump = 0;% Q3_max / A3;
%     attack = 0;
% end

%%%%%%%%%%%%%%%%%%%%%%%
%%% ATTACK 3:
%%% Attack: repeat { repeat(LIMIT) {SLEEP}; repeat(LIMIT) { pump = !pump}}
%%%%%%%%%%%%%%%%%%%%%%%
% if (counter <= LIMIT1)
%     attack = 0;
% elseif(counter > LIMIT1+LIMIT2)
%      counter = 0;
%       attack = 0;
% elseif(pump == 0 && counter > LIMIT1)
%     pump = 1;
%     attack = 1;  
% elseif(pump == 1 && counter > LIMIT1)
%      pump = 0;
%     attack = 1;
% end
% 
attack =0;
LIMIT = 500;
if(h >= 0.01*H3_max)
    pump = 1;% Q3_max / A3;

elseif (h < 0.00000001*H3_max)
%     if(counter > LIMIT)
%         pump = 1;
%     else
%         pump = 0;
%     end
pump = 0;
end

if counter > LIMIT
    attack = 1;
    pump = 1;
end
counter = counter + 1;
attack =0;

sys = [attack,pump,counter];

function [sys]=mdlOutputs(t,x,u)

sys = [x(1),x(2)];
return 
% end mdlOutputs